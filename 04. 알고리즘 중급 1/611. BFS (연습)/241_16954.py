'''
문제
욱제는 학교 숙제로 크기가 8×8인 체스판에서 탈출하는 게임을 만들었다.
체스판의 모든 칸은 빈 칸 또는 벽 중 하나이다.
욱제의 캐릭터는 가장 왼쪽 아랫 칸에 있고, 이 캐릭터는 가장 오른쪽 윗 칸으로 이동해야 한다.

이 게임의 특징은 벽이 움직인다는 점이다.
1초마다 모든 벽이 아래에 있는 행으로 한 칸씩 내려가고, 가장 아래에 있어서 아래에 행이 없다면 벽이 사라지게 된다.
욱제의 캐릭터는 1초에 인접한 한 칸 또는 대각선 방향으로 인접한 한 칸으로 이동하거나, 현재 위치에 서 있을 수 있다.
이동할 때는 빈 칸으로만 이동할 수 있다.

1초 동안 욱제의 캐릭터가 먼저 이동하고, 그 다음 벽이 이동한다.
벽이 캐릭터가 있는 칸으로 이동하면 더 이상 캐릭터는 이동할 수 없다.

욱제의 캐릭터가 가장 오른쪽 윗 칸으로 이동할 수 있는지 없는지 구해보자.

입력
8개 줄에 걸쳐서 체스판의 상태가 주어진다.
'.'은 빈 칸, '#'는 벽이다. 가장 왼쪽 아랫칸은 항상 벽이 아니다.

출력
욱제의 캐릭터가 가장 오른쪽 윗 칸에 도착할 수 있으면 1, 없으면 0을 출력한다.

예제 입력 1 
........
........
........
........
........
........
........
........
예제 출력 1 
1
예제 입력 2 
........
........
........
........
........
........
##......
........
예제 출력 2 
0
예제 입력 3 
........
........
........
........
........
.#......
#.......
.#......
예제 출력 3 
0
예제 입력 4 
........
........
........
........
........
.#######
#.......
........
예제 출력 4 
1
예제 입력 5 
........
........
........
........
#.......
.#######
#.......
........
예제 출력 5 
0
'''

# 밑으로 내려가야 하는 경우가 있나? 없는거같은데.
# 어차피 한칸 내려가면 벽이 따라 내려오니까 전과 상황이 같아진다.
# 움직인 칸 바로 위가 벽이면 불가능(1초 후 사망)
# 움직이기 -> 벽 확인하기 -> 한칸 위로 올리기(벽 내리기) 순서로 짜보자.

# 현재 위치에 서 있을 수 있다. 문제를 잘 읽자.
# 좌하 우하로 내려가야 하는 경우도 존재한다.
# 다음 반복에도 제자리에 있으려면 visited 기준을 벽이 내려가기 전으로 해야 한다.
'''..###.##
##...#.#
..#.#..#
#.#...#.
.#...#.#
.#.#..##
#..#..#.
..#....#'''
# 시작 좌표를 True로 설정하면 첫 반복에서 제자리에 있을 수 없다.
'''........
........
........
........
........
#.......
.#......
.#......'''

import sys
input = sys.stdin.readline

from collections import deque

def bfs():
    queue = deque()
    queue.append((7, 0))
    
    # 이 코드가 있으면 처음에 제자리에 있을 수 없다.
    # visited[7][0] = True

    while queue:
        x, y = queue.popleft()
        
        # 하방향 제외 8방향에 대해 반복
        for dx, dy in directions:
            nx, ny = x + dx, y + dy

            # 인덱스 확인, 벽이 아닌 것 확인, 미방문 확인
            if 0 <= nx < 8 and 0 <= ny < 8 and board[nx][ny] == "." and not visited[nx][ny]:

                # 가장 위칸에 도달하면 (0, 7)에 무조건 도달 가능 (모든 벽이 사라진 상태가 됨)
                if nx == 0:
                    print(1)
                    return

                # 벽이 내려오는 것을 고려하여 큐에는 nx-1, ny로 push
                # visited는 벽이 내려온 후 제자리에 있을 것을 고려하여 그대로 nx, ny를 사용
                elif 0 < nx and board[nx - 1][ny] == ".":
                    queue.append((nx - 1, ny))
                    visited[nx][ny] = True

    # 큐 소진 시 x=0 에 도달 불가
    print(0)

# 크기가 8*8인 체스판
board = [input().rstrip() for _ in range(8)]

# 제자리 좌 좌상 상 우상 우 좌하 우하 (하는 의미없음)
directions = ((0, 0), (0, -1), (-1, -1), (-1, 0), (-1, 1), (0, 1), (1, -1), (1, 1))

# 방문 확인 배열
visited = [[False for _ in range(8)] for _ in range(8)]

# bfs 실행
bfs()
