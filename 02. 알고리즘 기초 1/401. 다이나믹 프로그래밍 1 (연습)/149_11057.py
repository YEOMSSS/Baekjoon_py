'''
문제
오르막 수는 수의 자리가 오름차순을 이루는 수를 말한다. 이때, 인접한 수가 같아도 오름차순으로 친다.

예를 들어, 2234와 3678, 11119는 오르막 수이지만, 2232, 3676, 91111은 오르막 수가 아니다.

수의 길이 N이 주어졌을 때, 오르막 수의 개수를 구하는 프로그램을 작성하시오. 수는 0으로 시작할 수 있다.

입력
첫째 줄에 N (1 ≤ N ≤ 1,000)이 주어진다.

출력
첫째 줄에 길이가 N인 오르막 수의 개수를 10,007로 나눈 나머지를 출력한다.

예제 입력 1 
1
예제 출력 1 
10
예제 입력 2 
2
예제 출력 2 
55
예제 입력 3 
3
예제 출력 3 
220
'''
# dp[1] 0~9 10개
# dp[2] 0+0~9, 1+1~9 ... 9+9 = 10+9+8+7+6+5+4+3+2+1=55
# 앞의 수가 뭘로 끝났냐에 따라 달라진다.
# 0으로 끝나면 10개, 1로 끝나면 9개. i로 끝나면 10-i개.

# 그러면 수가 뭘로 끝났는지를 정리해서 넣어야 하는데.
# 0~9로 끝나는거, 즉 앞에 경우를 다 더한게 9로 끝나는것의 개수.
# 0~8로 끝나는걸 다 더한게 8로 끝나는것의 개수.
# 0~j로 끝나는걸 다 더한게 j로 끝나는것의 개수가 되겠다.
'''
N = int(input())
MOD = 10_007

dp = [[0] * 10 for _ in range(N + 1)]

dp[1] = [1] * 10

for i in range(2, N + 1):
    for j in range(10):
        dp[i][j] = sum(dp[i - 1][0 : j + 1]) % MOD

print(sum(dp[N]) % MOD)
'''
# sum을 매 반복마다 하는건 비효율적이야.
'''
N = int(input())
MOD = 10_007

dp = [[0] * 10 for _ in range(N + 1)]
dp[1] = [1] * 10

for i in range(2, N + 1):
    dp[i][0] = dp[i - 1][0]
    for j in range(1, 10):
        dp[i][j] = (dp[i][j - 1] + dp[i - 1][j]) % MOD # 누적합을 이용.

print(sum(dp[N]) % MOD)
'''
# 공간최적화를 내가 할 수 있겠지?
'''
import sys

N = int(input())
MOD = 10_007

if N == 1:
    print(10)
    sys.exit()

p0 = p1 = p2 = p3 = p4 = p5 = p6 = p7 = p8 = p9 = 1

for _ in range(2, N + 1):
    n0 = p0
    n1 = (n0 + p1) % MOD
    n2 = (n1 + p2) % MOD
    n3 = (n2 + p3) % MOD
    n4 = (n3 + p4) % MOD
    n5 = (n4 + p5) % MOD
    n6 = (n5 + p6) % MOD
    n7 = (n6 + p7) % MOD
    n8 = (n7 + p8) % MOD
    n9 = (n8 + p9) % MOD
    p0, p1, p2, p3, p4, p5, p6, p7, p8, p9 = n0, n1, n2, n3, n4, n5, n6, n7, n8, n9

print(sum([n0, n1, n2, n3, n4, n5, n6, n7, n8, n9]) % MOD)
'''
# 너무 길어.

N = int(input())
MOD = 10_007

dp = [1] * 10

for _ in range(N - 1):
    for j in range(1, 10):
        dp[j] = (dp[j] + dp[j - 1]) % MOD
        # 아직 갱신되지 않은 prev j + 방금 갱신된 new j-1

print(sum(dp) % MOD)

# 잘 풀었다!