'''
문제
RGB거리에는 집이 N개 있다. 거리는 선분으로 나타낼 수 있고, 1번 집부터 N번 집이 순서대로 있다.

집은 빨강, 초록, 파랑 중 하나의 색으로 칠해야 한다.
각각의 집을 빨강, 초록, 파랑으로 칠하는 비용이 주어졌을 때,
아래 규칙을 만족하면서 모든 집을 칠하는 비용의 최솟값을 구해보자.

1번 집의 색은 2번 집의 색과 같지 않아야 한다.
N번 집의 색은 N-1번 집의 색과 같지 않아야 한다.
i(2 ≤ i ≤ N-1)번 집의 색은 i-1번, i+1번 집의 색과 같지 않아야 한다.

입력
첫째 줄에 집의 수 N(2 ≤ N ≤ 1,000)이 주어진다.
둘째 줄부터 N개의 줄에는 각 집을 빨강, 초록, 파랑으로 칠하는 비용이 1번 집부터 한 줄에 하나씩 주어진다.
집을 칠하는 비용은 1,000보다 작거나 같은 자연수이다.

출력
첫째 줄에 모든 집을 칠하는 비용의 최솟값을 출력한다.
'''
'''
예제 입력 1 
3
26 40 83
49 60 57
13 89 99
예제 출력 1 
96
예제 입력 2 
3
1 100 100
100 1 100
100 100 1
예제 출력 2 
3
예제 입력 3 
3
1 100 100
100 100 100
1 100 100
예제 출력 3 
102
예제 입력 4 
6
30 19 5
64 77 64
15 19 97
4 71 57
90 86 84
93 32 91
예제 출력 4 
208
예제 입력 5 
8
71 39 44
32 83 55
51 37 63
89 29 100
83 58 11
65 13 15
47 25 29
60 66 19
예제 출력 5 
253
'''


# 한번도 안 겹치게 빨파초를 칠해라!
# 근데 집마다 빨파초를 칠하는 가격이 다르고, 다 칠했을 때 제일 싸게.

# dp[i]에 빨파초가 마지막일때 최솟값을 각각 저장하자.

import sys

N = int(input())

# prices = [list(map(int, val.split())) for val in sys.stdin.read().rstrip().split("\n")]
prices = [list(map(int, line.split())) for line in sys.stdin.read().splitlines()]

dp = [[0, 0, 0] for _ in range(N + 1)]

R, G, B = 0, 1, 2 # 가독성 향상
for i in range(1, N + 1):
    dp[i][R] = min(dp[i - 1][G], dp[i - 1][B]) + prices[i - 1][R]
    dp[i][G] = min(dp[i - 1][R], dp[i - 1][B]) + prices[i - 1][G]
    dp[i][B] = min(dp[i - 1][R], dp[i - 1][G]) + prices[i - 1][B]
    
# 마지막 집을 각각 빨/파/초로 칠했을 때 최소 비용 중 최솟값
print(min(dp[N]))

# 아니 왤케 잘하냐??
# 자신감이 생긴다!!