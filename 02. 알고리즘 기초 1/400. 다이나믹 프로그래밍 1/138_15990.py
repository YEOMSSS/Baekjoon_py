'''
문제
정수 4를 1, 2, 3의 합으로 나타내는 방법은 총 3가지가 있다.
합을 나타낼 때는 수를 1개 이상 사용해야 한다.
단, 같은 수를 두 번 이상 연속해서 사용하면 안 된다.

1+2+1
1+3
3+1
정수 n이 주어졌을 때, n을 1, 2, 3의 합으로 나타내는 방법의 수를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 테스트 케이스의 개수 T가 주어진다.
각 테스트 케이스는 한 줄로 이루어져 있고, 정수 n이 주어진다.
n은 양수이며 100,000보다 작거나 같다.

출력
각 테스트 케이스마다, n을 1, 2, 3의 합으로 나타내는 방법의 수를 1,000,000,009로 나눈 나머지를 출력한다.

예제 입력 1 
3
4
7
10
예제 출력 1 
3
9
27
'''

# 1350_9095번과 같은 맥락의 문제다.
# 다만 수가 연속되는 경우는 인정되지 않는다.

# dp[i] = dp[i-1] + dp[i-2] + dp[i-3] 에서 크게 벗어나진 않을텐데..
# 각각 1, 2, 3을 뒤에 붙이는 건데, 맨 끝이 각각 1, 2, 3인 경우를 제해야한다.

# dp[1] = 1 1
# dp[2] = 1 2
# dp[3] = 3 12 21 3
# dp[4] = 3 13 121 31 
# dp[5] = 4 23 212 32 131
# dp[6] = 8 123 213 132 1212 312 231 2121 321
# dp[7] = 9 1213 313 232 1312 1231 2131 1321 12121 3121
# 각 숫자마다 끝나는 자릿수가 뭔지를 기록해둬야 할 것 같기도 하다.

# 시간 초과가 한번 났었는데, 시행마다 dp배열을 계속 만들다보니 그랬던 듯.
# 배열을 한번 만들어두고 계속 사용하는것이 반복될 땐 훨씬 빠르다.
# 테스트 케이스가 십만개면 배열 십만개 만들거야??

import sys
input = sys.stdin.readline

dp = [[0, 0, 0] for _ in range(100001)]

# 1, 2, 3으로 끝나는 수의 수
dp[1] = [1, 0, 0] # 1
dp[2] = [0, 1, 0] # 2
dp[3] = [1, 1, 1] # 21 12 3

# 그럼 점화식에서는
# dp[i] = [dp[i - 1][1] + dp[i - 1][2], dp[i - 2][0] + dp[i - 2][2], dp[i - 3][0] + dp[i - 3][1]]
# 이런 식으로? 되려나?
# dp[i - 1][1] + dp[i - 1][2] 는 1을 붙일 dp에서 1로 끝나는 애들을 제외한 합이 되는거니까.

for i in range(4, 100001):
    dp[i] = [(dp[i - 1][1] + dp[i - 1][2]) % 1000000009,
                (dp[i - 2][0] + dp[i - 2][2]) % 1000000009, 
                (dp[i - 3][0] + dp[i - 3][1]) % 1000000009]

for _ in range(int(input())):
    num = int(input())
    print(sum(dp[num]) % 1000000009)