'''
문제
요즘 민규네 동네에서는 스타트링크에서 만든 PS카드를 모으는 것이 유행이다.

PS카드는 PS(Problem Solving)분야에서 유명한 사람들의 아이디와 얼굴이 적혀있는 카드이다.
각각의 카드에는 등급을 나타내는 색이 칠해져 있고, 다음과 같이 8가지가 있다.

전설카드
레드카드
오렌지카드
퍼플카드
블루카드
청록카드
그린카드
그레이카드
카드는 카드팩의 형태로만 구매할 수 있고, 카드팩의 종류는 카드 1개가 포함된 카드팩,
카드 2개가 포함된 카드팩, ... 카드 N개가 포함된 카드팩과 같이 총 N가지가 존재한다.

민규는 카드의 개수가 적은 팩이더라도 가격이 비싸면 높은 등급의 카드가 많이 들어있을 것이라는 미신을 믿고 있다.
따라서, 민규는 돈을 최대한 많이 지불해서 카드 N개 구매하려고 한다. 카드가 i개 포함된 카드팩의 가격은 Pi원이다.

예를 들어, 카드팩이 총 4가지 종류가 있고, P1 = 1, P2 = 5, P3 = 6, P4 = 7인 경우에
민규가 카드 4개를 갖기 위해 지불해야 하는 금액의 최댓값은 10원이다. 2개 들어있는 카드팩을 2번 사면 된다.

P1 = 5, P2 = 2, P3 = 8, P4 = 10인 경우에는 카드가 1개 들어있는 카드팩을 4번 사면 20원이고,
이 경우가 민규가 지불해야 하는 금액의 최댓값이다.

마지막으로, P1 = 3, P2 = 5, P3 = 15, P4 = 16인 경우에는 3개 들어있는 카드팩과
1개 들어있는 카드팩을 구매해 18원을 지불하는 것이 최댓값이다.

카드 팩의 가격이 주어졌을 때,
N개의 카드를 구매하기 위해 민규가 지불해야 하는 금액의 최댓값을 구하는 프로그램을 작성하시오.
N개보다 많은 개수의 카드를 산 다음, 나머지 카드를 버려서 N개를 만드는 것은 불가능하다.
즉, 구매한 카드팩에 포함되어 있는 카드 개수의 합은 N과 같아야 한다.

입력
첫째 줄에 민규가 구매하려고 하는 카드의 개수 N이 주어진다. (1 ≤ N ≤ 1,000)

둘째 줄에는 Pi가 P1부터 PN까지 순서대로 주어진다. (1 ≤ Pi ≤ 10,000)

출력
첫째 줄에 민규가 카드 N개를 갖기 위해 지불해야 하는 금액의 최댓값을 출력한다.

예제 입력 1 
4
1 5 6 7
예제 출력 1 
10
예제 입력 2 
5
10 9 8 7 6
예제 출력 2 
50
예제 입력 3 
10
1 1 2 3 5 8 13 21 34 55
예제 출력 3 
55
예제 입력 4 
10
5 10 11 12 13 30 35 40 45 47
예제 출력 4 
50
예제 입력 5 
4
5 2 8 10
예제 출력 5 
20
예제 입력 6 
4
3 5 15 16
예제 출력 6 
18
'''

# 문제는 이해했다.
# 카드 n 장을 구매하는데, 카드팩이 1장짜리 ~ n장짜리까지 있다.
# 가장 비싼 조합을 구하라는 거지.

# 브루트포스처럼 모든 경우를 구할 수 있나?
# n을 만드는 모든 경우를 다 해서 최댓값을 구한다.. 비효율적.

# 이걸 dp테이블로 만들라면 어떻게 해야할까?
# dp[i]를 i장 카드를 구매하는 최댓값이라 하면
# dp[1] = 1
# dp[2] = 2, 11
# dp[3] = 3, 21, 111 1만 붙인거에 3
# dp[4] = 4, 31, 22, 211, 1111 1만 붙인거에 22, 4
# dp[5] = 5, 41, 32, 311, 221, 2111, 11111 1만 붙인거에 32, 5
# dp[6] = 6, 51, 42, 411, 33, 321, 3111, 222, 2211, 21111, 111111 1만 붙인거에 222, 33, 42, 6
# 일단 규칙성은 잘 모르겠다.

# 4
# 5 2 8 10
# 이걸로 굴려 보면
# dp[1] = 5
# dp[2] = 2, 10 = 10
# dp[3] = 8, 7, 14 = 15
# dp[4] = 10, 13, 4, 12, 20 = 20
# 해봐도 잘 모르겠는데...

# 일단 하나 알겠는건, 카드가 적게 든 카드팩이 많이 든 카드팩보다 비싸다면
# 더 싼 카드팩이 든 경우의 수는 고려할 필요가 없어진다.

# 가장 비싼 카드가 뭘지 생각해보자.
# 카드가 장당 얼마인지 따져보는거지.
# 팩가격/장수 를 다 해주면 된다. 거기서 제일 비싼걸 일단 찾고..
# 그 팩을 최대한 많이 사면서 n장을 딱 맞추는게 포인트가 되겠는데.
# 일단 그 팩으로 산 다음에, 남은 카드가 다시 새로운 n이 된다고 생각하면 되겠구나!
'''
num = int(input())

pack_prices = list(map(int, input().split()))

answer = 0
while num != 0:
    card_prices = []

    for i in range(num):
        card_prices.append(pack_prices[i] / (i + 1))

    maximum = max(card_prices)
    index_max = card_prices.index(maximum)

    answer += maximum * (index_max + 1) * (num // (index_max + 1))
    
    num %= index_max + 1

print(round(answer))
'''
# 내가 푼게 그리디 알고리즘 방식이래. 모르고 푼거긴 한디..
# 왜 틀렸냐! GPT도 모르는데??? ㅅㅂ맞은거아니냐??
# 아마 한 30%까지 올라가다가 막판에 말아먹는게 int에서 부동소수점 오차가 나는 것 같다.
# 그럼 int(내림)가 아니라 round(반올림)를 써볼까!!

# 그래도 틀리네? 아예 정수계산만 하도록 코드를 다시 짜보자.
'''
num = int(input())

pack_prices = list(map(int, input().split()))

answer = 0
while num != 0:
    card_prices = []

    index_max = 0
    for i in range(num):
        # → float 비교 대신 정수비교: a/b < c/d ⇔ a*d < c*b
        if pack_prices[i] * (index_max + 1) > pack_prices[index_max] * (i + 1):
                    index_max = i

    answer += pack_prices[index_max] * (num // (index_max + 1))
    # 가장 비싼 팩을 최대한 많이 구매한다.
    
    num %= index_max + 1

print(answer)
'''
# 그리디는 지금 "가장 이득"인 선택을 하지만, 이 문제는 "전체 조합 중 가장 이득"이 필요하다.
# 그래서 그리디는 틀리고, DP만 정답을 보장한다.
# 그렇다고 하니까, 이제 dp로 풀어보자.

num = int(input())
pack_prices = list(map(int, input().split()))

dp = [0] * (num + 1)
# dp[i] 는 i장의 카드를 구매할 때 최댓값이라고 하자.

for i in range(1, num + 1):
    for j in range(1, i + 1):
        dp[i] = max(dp[i], dp[i - j] + pack_prices[j - 1])
        # dp[i - j]는 j장을 뺀 장의 카드를 구매할 때 최댓값이다.
        # p[j - 1]은 j장 카드팩의 가격이다.
        # 카드팩을 하나씩 사보면서 최댓값을 구하는 것이다.

        # i장을 맞추기 위해 j장짜리 카드팩을 마지막에 하나 샀다 치고
        # 나머지 i-j장은 이미 제일 비싸게 샀으니까, j장 카드팩을 합친 값 중 최댓값을 고른다.
print(dp[num])

# num 이 1000 이하이므로 반복문 2개까지는 감당가능.