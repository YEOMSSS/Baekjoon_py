'''
문제
0부터 N까지의 정수 K개를 더해서 그 합이 N이 되는 경우의 수를 구하는 프로그램을 작성하시오.

덧셈의 순서가 바뀐 경우는 다른 경우로 센다(1+2와 2+1은 서로 다른 경우).
또한 한 개의 수를 여러 번 쓸 수도 있다.

입력
첫째 줄에 두 정수 N(1 ≤ N ≤ 200), K(1 ≤ K ≤ 200)가 주어진다.

출력
첫째 줄에 답을 1_000_000_000으로 나눈 나머지를 출력한다.

예제 입력 1 
20 2
예제 출력 1 
21
예제 입력 2 
6 4
예제 출력 2 
84
'''

# 4 5

# 4자리로 5만들기 = 
# 0 + 3자리로 5만들기
# 1 + 3자리로 4만들기
# ...
# 4 + 3자리로 1만들기
# 5 + 3자리로 0만들기

# 4자리로 4만들기 = 1*2자리4 + 2*2자리3 + 3*2자리2 + 4*2자리1 + 5*2자리0
# 0 + 3자리로 4만들기 = 2자리4 + 2자리3 + 2자리2 + 2자리1 + 2자리0
# 1 + 3자리로 3만들기 = 2자리3 + 2자리2 + 2자리1 + 2자리0
# ...
# 3 + 3자리로 1만들기 = 2자리1 + 2자리0
# 4 + 3자리로 0만들기 = 2자리0

# 4자리로 3만들기 = 
# 0 + 3자리로 3만들기
# 1 + 3자리로 2만들기
# 2 + 3자리로 1만들기
# 3 + 3자리로 0만들기

# 4자리로 2만들기 = 
# 0 + 3자리로 2만들기
# 1 + 3자리로 1만들기
# 2 + 3자리로 0만들기

# 4자리로 1만들기 = 
# 0 + 3자리로 1만들기
# 1 + 3자리로 0만들기

# 4자리로 0만들기 = 
# 0 + 3자리로 0만들기
'''
N, K = map(int, input().split())

dp = [1] * (N + 1)
temp = [0] * (N + 1)

for _ in range(K - 1):
    for i in range(N + 1):
        temp[i] = sum(dp[:i + 1]) % 1_000_000_000
    dp, temp = temp, dp

# print(dp)
# print(temp)

print(dp[N] % 1_000_000_000)
'''
# sum이 반복되니까 누적합으로 최적화해 보자.

N, K = map(int, input().split())

dp = [1] * (N + 1) # 1자리로 N만들기
temp = [0] * (N + 1)

for _ in range(K - 1):
    acc = 0
    for i in range(N + 1):
        acc = (acc + dp[i]) % 1_000_000_000
        temp[i] = acc # ?자리로 i만들기
    dp, temp = temp, dp

# print(dp)
# print(temp)

print(dp[N] % 1_000_000_000)

# 해냈어, 해냈다고! 그 누구의 도움 없이도!
# 하다 보니 느는구나! 골드도 별거 없네!